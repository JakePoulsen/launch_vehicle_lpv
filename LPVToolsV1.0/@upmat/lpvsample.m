function s = lpvsample(m,varargin) %Npts,opt)
% LPVSAMPLE   Sample a UPMAT object
%
% S=LPVSAMPLE(G,N) returns N samples of the system G. Each sample
% of G is generated by evaluating G at a randomly chosen point in the 
% domain of G. The output S is an array of uncertain matrix data (UMAT)
% of size: [size(G), N].
%
% S=LPVSAMPLE(G,N,OPT) allows the user to specify the sampling algorithm
% to be used. OPT is a CHAR specifies the type of sampling:
%    -'grid': Draws points drawn randomly (possibly with repeats) from 
%         the rectangular grid of G.Domain.
%    -'uniform' (default): Draws points uniformly from the hypercube
%         specified by the limits of G.Domain.
%    -'LHC': Does a Latin Hypercube sample of the G.Domain.
% For 'uniform' and 'LHC', the samples are not, in general, elements
% of the rectangular grid.
%
%   % EXAMPLE: (CUT/PASTE)
%   % Sample a 2-by-2 UPMAT object
%   a = pgrid('a',1:5);
%   M = 10*a*ureal('u',10);
%   Su = lpvsample(M,15);   % Uniform sample
%   Sg = lpvsample(M,15,'grid');   % Sample from grid
%   plot(1:15,Su.NominalValue(:),'bx',1:15,Sg.NominalValue(:),'ro')
%   legend('Uniform','Grid','Location','Best')
% 
% See also: lpvsubs, usample, lpvsplit, lpvinterp.

% TODO PJS 4/29/2011: Add a simple example to the function help.



% Get matrix data
try
   [M,Delta] = lftdata(m.DataPrivate);
catch
   error('Cannot interpolate matrices whose uncertainty description changes');
end
pM = pmat(M,m.DomainPrivate); 
s = lft(Delta,lpvsample(pM,varargin{:}));

% 
% if nargin==2
%     opt = 'uniform';
% end
% 
% szm = size(m);
% IVName = m.Domain.IVName;
% domsamp = lpvsample(m.Domain,Npts,opt);
% niv = m.Domain.NumIV;
% domsampcell = cell(niv,1);
% for i=1:niv
%     domsampcell{i} = { sort(domsamp(1,:)) };
% end
% %domsamp = mat2cell(domsamp,ones(niv,1),Npts);
% 
% s = lpvinterp(m,IVName,domsampcell);

% s = zeros([szm(1:2) Npts]);
% for i=1:Npts
%     tmp = lpvinterp(m,IVName,num2cell(domsamp(:,i)));
%     s(:,:,i) =  tmp.DataPrivate;
% end

