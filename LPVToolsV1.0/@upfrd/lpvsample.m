function s = lpvsample(m,varargin)
% LPVSAMPLE   Sample a UPFRD object
%
% S=LPVSAMPLE(SYS,N) returns N samples of the system SYS. Each sample
% of SYS is generated by evaluating SYS at a randomly chosen point in the 
% domain of SYS. The output S is an array of uncertain frequency response 
% data (UFRD) of size: [size(SYS), N].
%
% S=LPVSAMPLE(SYS,N,OPT) allows the user to specify the sampling algorithm
% to be used. OPT is a CHAR specifies the type of sampling:
%    -'grid': Draws points drawn randomly (possibly with repeats) from 
%         the rectangular grid of SYS.Domain.
%    -'uniform' (default): Draws points uniformly from the hypercube
%         specified by the limits of SYS.Domain.
%    -'LHC': Does a Latin Hypercube sample of the SYS.Domain.
% For 'uniform' and 'LHC', the samples are not, in general, elements
% of the rectangular grid.
% 
%   % EXAMPLE: (CUT/PASTE)
%   % Sample a 1-by-1 UPFRD object
%   a = pgrid('a',1:5);
%   G = ss(-a,2,4,0)*ureal('u',5);
%   w = logspace(-1,1,100);
%   M = ufrd(G,w);
%   Su = lpvsample(M,15);   % Uniform sample
%   Sg = lpvsample(M,15,'grid');   % Sample from grid
%   bode(Su.NominalValue,'b',Sg.NominalValue,'r')
%   legend('Uniform','Grid','Location','Best')
% 
% See also: lpvsubs, usample, lpvsplit, lpvinterp.

% TODO PJS 4/29/2011: Add a simple example to the function help.

if nargin==2
    opt = 'uniform';
end

% Get state-space data
try
   [M,Delta] = lftdata(m.DataPrivate);
catch
   error('Cannot interpolate systems whose uncertainty description changes');
end
pM = pfrd(M,m.DomainPrivate); 
s = lft(Delta,lpvsample(pM,varargin{:}));

