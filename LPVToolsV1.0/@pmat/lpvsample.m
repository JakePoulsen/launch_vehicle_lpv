function s = lpvsample(m,Npts,opt)
% LPVSAMPLE   Sample a PMAT object
%
% S=LPVSAMPLE(G,N) returns N samples of the system G. Each sample
% of G is generated by evaluating G at a randomly chosen point in the 
% domain of G. The output S is an array of size: [size(G), N].
%
% S=LPVSAMPLE(G,N,OPT) allows the user to specify the sampling algorithm
% to be used. OPT is a CHAR that specifies the type of sampling:
%    -'grid': Draws points drawn randomly (possibly with repeats) from 
%         the rectangular grid of G.Domain.
%    -'uniform' (default): Draws points uniformly from the hypercube
%         specified by the limits of G.Domain.
%    -'LHC': Does a Latin Hypercube sample of the G.Domain.
% For 'uniform' and 'LHC', the samples are not, in general, elements
% of the rectangular grid.
%
%   % EXAMPLE: (CUT/PASTE)
%   % Sample a 2-by-2 PMAT object
%   a = pgrid('a',1:5);
%   M = 10*a;
%   Su = lpvsample(M,15);   % Uniform sample
%   Sg = lpvsample(M,15,'grid');   % Sample from grid
%   plot(1:15,Su(:),'bx',1:15,Sg(:),'ro')
%   legend('Uniform','Grid','Location','Best')
% 
% See also: lpvsubs, lpvsplit, lpvinterp.
 


% TODO PJS 4/29/2011: Add a simple example to the function help.

if nargin==2
    opt = 'uniform';
end

szm = size(m); 
IVName = m.Domain.IVName;
domsamp = lpvsample(m.Domain,Npts,opt);
s = zeros([szm Npts]);
idx = cellstr(repmat(':',length(szm),1))'; 
for i=1:Npts
    tmp = lpvinterp(m,IVName,num2cell(domsamp(:,i)));
    s(idx{:},i) =  double(tmp);
end

